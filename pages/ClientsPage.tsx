
import React, { useState } from 'react';
import DataTable, { ColumnDefinition } from '../components/DataTable';
import { Client } from '../types';
import { useData } from '../contexts/DataContext';
import Modal from '../components/Modal';
import { PlusIcon, PencilIcon, TrashIcon } from '../components/icons/Icons';

// ClientForm component defined outside ClientsPage
interface ClientFormProps {
  initialData?: Client | null;
  onSubmit: (client: Client) => void;
  onCancel: () => void;
}

const ClientForm: React.FC<ClientFormProps> = ({ initialData, onSubmit, onCancel }) => {
  const [client, setClient] = useState<Partial<Client>>(initialData || {
    nombre: '', 
    rut: '', 
    contacto: '', 
    correo: '', 
    telefono: '', 
    direccion: '',
    planta: ''
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setClient(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Basic validation
    if (!client.nombre || !client.rut) {
        alert("Nombre y RUT son requeridos.");
        return;
    }
    onSubmit(client as Client); // Assume client has all required fields by this point if initialData or filled
  };

  const formFields: { name: keyof Client; label: string; type: string; required?: boolean }[] = [
    { name: 'nombre', label: 'Nombre Cliente/Empresa', type: 'text', required: true },
    { name: 'rut', label: 'RUT (ej: 12.345.678-K)', type: 'text', required: true },
    { name: 'planta', label: 'Planta', type: 'text' },
    { name: 'contacto', label: 'Persona de Contacto', type: 'text' },
    { name: 'correo', label: 'Email', type: 'email' },
    { name: 'telefono', label: 'Teléfono', type: 'tel' },
    { name: 'direccion', label: 'Dirección', type: 'text' },
  ];

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {formFields.map(field => (
        <div key={field.name}>
          <label htmlFor={field.name} className="block text-sm font-medium text-gray-700">{field.label}</label>
          <input
            type={field.type}
            name={field.name}
            id={field.name}
            value={client[field.name] as string || ''}
            onChange={handleChange}
            required={field.required}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brand-primary focus:border-brand-primary sm:text-sm"
          />
        </div>
      ))}
      <div className="flex justify-end space-x-2 pt-2">
        <button type="button" onClick={onCancel} className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md">Cancelar</button>
        <button type="submit" className="px-4 py-2 text-sm font-medium text-white bg-brand-primary hover:bg-brand-primary-dark rounded-md">{initialData ? 'Actualizar' : 'Crear'} Cliente</button>
      </div>
    </form>
  );
};


const ClientsPage: React.FC = () => {
  const { clients, addClient, updateClient, deleteClient } = useData();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingClient, setEditingClient] = useState<Client | null>(null);
  const [searchTerm, setSearchTerm] = useState('');


  const handleAddNew = () => {
    setEditingClient(null);
    setIsModalOpen(true);
  };

  const handleEdit = (client: Client) => {
    setEditingClient(client);
    setIsModalOpen(true);
  };

  const handleDelete = (clientId: string) => {
    if (window.confirm('¿Está seguro de que desea eliminar este cliente?')) {
      deleteClient(clientId);
    }
  };

  const handleFormSubmit = (clientData: Client) => {
    if (editingClient && editingClient.id) { // Check for id for existing client
      updateClient({ ...clientData, id: editingClient.id, createdAt: editingClient.createdAt });
    } else {
      // For new client, id and createdAt will be generated by addClient
      addClient(clientData as Omit<Client, 'id' | 'createdAt'>);
    }
    setIsModalOpen(false);
    setEditingClient(null);
  };
  
  const filteredClients = clients.filter(client => 
    (client.nombre?.toLowerCase().includes(searchTerm.toLowerCase()) || false) ||
    (client.rut?.toLowerCase().includes(searchTerm.toLowerCase()) || false) ||
    (client.correo?.toLowerCase().includes(searchTerm.toLowerCase()) || false) ||
    (client.contacto?.toLowerCase().includes(searchTerm.toLowerCase()) || false)
  );

  const columns: ColumnDefinition<Client>[] = [
    { key: 'nombre', header: 'Nombre', className: 'font-medium text-gray-900' },
    { key: 'rut', header: 'RUT' },
    { key: 'planta', header: 'Planta' },
    { key: 'contacto', header: 'Contacto' },
    { key: 'correo', header: 'Email' },
    { key: 'telefono', header: 'Teléfono' },
    {
      key: 'actions',
      header: 'Acciones',
      render: (client) => (
        <div className="flex space-x-2">
          <button
            onClick={() => handleEdit(client)}
            className="text-blue-600 hover:text-blue-800"
            title="Ver detalles"
          >
            <PencilIcon className="w-5 h-5" />
          </button>
          <button
            onClick={() => handleEdit(client)}
            className="text-yellow-600 hover:text-yellow-800"
            title="Editar"
          >
            <PencilIcon className="w-5 h-5" />
          </button>
          <button
            onClick={() => handleDelete(client.id)}
            className="text-red-600 hover:text-red-800"
            title="Eliminar"
          >
            <TrashIcon className="w-5 h-5" />
          </button>
        </div>
      ),
    },
  ];

  return (
    <div className="p-6 space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-semibold text-gray-800">Gestión de Clientes</h1>
        <button
          onClick={handleAddNew}
          className="flex items-center px-4 py-2 bg-brand-primary text-white rounded-md hover:bg-brand-primary-dark transition-colors"
        >
          <PlusIcon className="w-5 h-5 mr-2" />
          Nuevo Cliente
        </button>
      </div>

      <div className="bg-white p-4 rounded-lg shadow">
         <input 
            type="text"
            placeholder="Buscar cliente por nombre, RUT, email o contacto..."
            className="w-full p-2 border border-gray-300 rounded-md"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
        />
      </div>

      <DataTable
        columns={columns}
        data={filteredClients}
        onRowClick={(client) => handleEdit(client)} // Example: clicking row opens edit modal
        emptyStateMessage="No se encontraron clientes. Intente agregar uno nuevo."
      />

      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} title={editingClient ? 'Editar Cliente' : 'Nuevo Cliente'}>
        <ClientForm 
            initialData={editingClient} 
            onSubmit={handleFormSubmit} 
            onCancel={() => { setIsModalOpen(false); setEditingClient(null); }} 
        />
      </Modal>
    </div>
  );
};

export default ClientsPage;